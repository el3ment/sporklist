{"ts":1352520496550,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\n/**\n * This is core configuration file.\n *\n * Use it to configure core behavior of Cake.\n *\n * PHP 5\n *\n * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)\n * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)\n *\n * Licensed under The MIT License\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)\n * @link          http://cakephp.org CakePHP(tm) Project\n * @package       app.Config\n * @since         CakePHP(tm) v 0.2.9\n * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)\n */\n\n/**\n * CakePHP Debug Level:\n *\n * Production Mode:\n * \t0: No error messages, errors, or warnings shown. Flash messages redirect.\n *\n * Development Mode:\n * \t1: Errors and warnings shown, model caches refreshed, flash messages halted.\n * \t2: As in 1, but also with full debug messages and SQL output.\n *\n * In production mode, flash messages redirect after a time interval.\n * In development mode, you need to click the flash message to continue.\n */\n\tConfigure::write('debug', 2);\n\n/**\n * Configure the Error handler used to handle errors for your application.  By default\n * ErrorHandler::handleError() is used.  It will display errors using Debugger, when debug > 0\n * and log errors with CakeLog when debug = 0.\n *\n * Options:\n *\n * - `handler` - callback - The callback to handle errors. You can set this to any callable type,\n *    including anonymous functions.\n * - `level` - int - The level of errors you are interested in capturing.\n * - `trace` - boolean - Include stack traces for errors in log files.\n *\n * @see ErrorHandler for more information on error handling and configuration.\n */\n\tConfigure::write('Error', array(\n\t\t'handler' => 'ErrorHandler::handleError',\n\t\t'level' => E_ALL & ~E_DEPRECATED,\n\t\t'trace' => true\n\t));\n\n/**\n * Configure the Exception handler used for uncaught exceptions.  By default,\n * ErrorHandler::handleException() is used. It will display a HTML page for the exception, and\n * while debug > 0, framework errors like Missing Controller will be displayed.  When debug = 0,\n * framework errors will be coerced into generic HTTP errors.\n *\n * Options:\n *\n * - `handler` - callback - The callback to handle exceptions. You can set this to any callback type,\n *   including anonymous functions.\n * - `renderer` - string - The class responsible for rendering uncaught exceptions.  If you choose a custom class you\n *   should place the file for that class in app/Lib/Error. This class needs to implement a render method.\n * - `log` - boolean - Should Exceptions be logged?\n *\n * @see ErrorHandler for more information on exception handling and configuration.\n */\n\tConfigure::write('Exception', array(\n\t\t'handler' => 'ErrorHandler::handleException',\n\t\t'renderer' => 'ExceptionRenderer',\n\t\t'log' => true\n\t));\n\n/**\n * Application wide charset encoding\n */\n\tConfigure::write('App.encoding', 'UTF-8');\n\n/**\n * To configure CakePHP *not* to use mod_rewrite and to\n * use CakePHP pretty URLs, remove these .htaccess\n * files:\n *\n * /.htaccess\n * /app/.htaccess\n * /app/webroot/.htaccess\n *\n * And uncomment the App.baseUrl below:\n */\n\t//Configure::write('App.baseUrl', env('SCRIPT_NAME'));\n\n/**\n * Uncomment the define below to use CakePHP prefix routes.\n *\n * The value of the define determines the names of the routes\n * and their associated controller actions:\n *\n * Set to an array of prefixes you want to use in your application. Use for\n * admin or other prefixed routes.\n *\n * \tRouting.prefixes = array('admin', 'manager');\n *\n * Enables:\n *\t`admin_index()` and `/admin/controller/index`\n *\t`manager_index()` and `/manager/controller/index`\n *\n */\n\t//Configure::write('Routing.prefixes', array('admin'));\n\n/**\n * Turn off all caching application-wide.\n *\n */\n\t//Configure::write('Cache.disable', true);\n\n/**\n * Enable cache checking.\n *\n * If set to true, for view caching you must still use the controller\n * public $cacheAction inside your controllers to define caching settings.\n * You can either set it controller-wide by setting public $cacheAction = true,\n * or in each action using $this->cacheAction = true.\n *\n */\n\t//Configure::write('Cache.check', true);\n\n/**\n * Defines the default error type when using the log() function. Used for\n * differentiating error logging and debugging. Currently PHP supports LOG_DEBUG.\n */\n\tdefine('LOG_ERROR', LOG_ERR);\n\n/**\n * Session configuration.\n *\n * Contains an array of settings to use for session configuration. The defaults key is\n * used to define a default preset to use for sessions, any settings declared here will override\n * the settings of the default config.\n *\n * ## Options\n *\n * - `Session.cookie` - The name of the cookie to use. Defaults to 'CAKEPHP'\n * - `Session.timeout` - The number of minutes you want sessions to live for. This timeout is handled by CakePHP\n * - `Session.cookieTimeout` - The number of minutes you want session cookies to live for.\n * - `Session.checkAgent` - Do you want the user agent to be checked when starting sessions? You might want to set the\n *    value to false, when dealing with older versions of IE, Chrome Frame or certain web-browsing devices and AJAX\n * - `Session.defaults` - The default configuration set to use as a basis for your session.\n *    There are four builtins: php, cake, cache, database.\n * - `Session.handler` - Can be used to enable a custom session handler.  Expects an array of of callables,\n *    that can be used with `session_save_handler`.  Using this option will automatically add `session.save_handler`\n *    to the ini array.\n * - `Session.autoRegenerate` - Enabling this setting, turns on automatic renewal of sessions, and\n *    sessionids that change frequently. See CakeSession::$requestCountdown.\n * - `Session.ini` - An associative array of additional ini values to set.\n *\n * The built in defaults are:\n *\n * - 'php' - Uses settings defined in your php.ini.\n * - 'cake' - Saves session files in CakePHP's /tmp directory.\n * - 'database' - Uses CakePHP's database sessions.\n * - 'cache' - Use the Cache class to save sessions.\n *\n * To define a custom session handler, save it at /app/Model/Datasource/Session/<name>.php.\n * Make sure the class implements `CakeSessionHandlerInterface` and set Session.handler to <name>\n *\n * To use database sessions, run the app/Config/Schema/sessions.php schema using\n * the cake shell command: cake schema create Sessions\n *\n */\n\tConfigure::write('Session', array(\n\t\t'defaults' => 'php'\n\t));\n\n/**\n * The level of CakePHP security.\n */\n\tConfigure::write('Security.level', 'medium');\n\n/**\n * A random string used in security hashing methods.\n */\n\tConfigure::write('Security.salt', 'DYhG93b0qyJfIxfs2guVoUubWwvniR2G0FgaC9mi');\n\n/**\n * A random numeric string (digits only) used to encrypt/decrypt strings.\n */\n\tConfigure::write('Security.cipherSeed', '76859309657453542496749683645');\n\n/**\n * Apply timestamps with the last modified time to static assets (js, css, images).\n * Will append a querystring parameter containing the time the file was modified. This is\n * useful for invalidating browser caches.\n *\n * Set to `true` to apply timestamps when debug > 0. Set to 'force' to always enable\n * timestamping regardless of debug value.\n */\n\t//Configure::write('Asset.timestamp', true);\n\n/**\n * Compress CSS output by removing comments, whitespace, repeating tags, etc.\n * This requires a/var/cache directory to be writable by the web server for caching.\n * and /vendors/csspp/csspp.php\n *\n * To use, prefix the CSS link URL with '/ccss/' instead of '/css/' or use HtmlHelper::css().\n */\n\t//Configure::write('Asset.filter.css', 'css.php');\n\n/**\n * Plug in your own custom JavaScript compressor by dropping a script in your webroot to handle the\n * output, and setting the config below to the name of the script.\n *\n * To use, prefix your JavaScript link URLs with '/cjs/' instead of '/js/' or use JavaScriptHelper::link().\n */\n\t//Configure::write('Asset.filter.js', 'custom_javascript_output_filter.php');\n\n/**\n * The classname and database used in CakePHP's\n * access control lists.\n */\n\tConfigure::write('Acl.classname', 'DbAcl');\n\tConfigure::write('Acl.database', 'default');\n\n/**\n * Uncomment this line and correct your server timezone to fix \n * any date & time related errors.\n */\n\t//date_default_timezone_set('UTC');\n\n/**\n * Pick the caching engine to use.  If APC is enabled use it.\n * If running via cli - apc is disabled by default. ensure it's available and enabled in this case\n *\n * Note: 'default' and other application caches should be configured in app/Config/bootstrap.php.\n *       Please check the comments in boostrap.php for more info on the cache engines available \n *       and their setttings.\n */\n$engine = 'File';\nif (extension_loaded('apc') && function_exists('apc_dec') && (php_sapi_name() !== 'cli' || ini_get('apc.enable_cli'))) {\n\t$engine = 'Apc';\n}\n\n// In development mode, caches should expire quickly.\n$duration = '+999 days';\nif (Configure::read('debug') >= 1) {\n\t$duration = '+10 seconds';\n}\n\n// Prefix each application on the same server with a different string, to avoid Memcache and APC conflicts.\n$prefix = 'myapp_';\n\n/**\n * Configure the cache used for general framework caching.  Path information,\n * object listings, and translation cache files are stored with this configuration.\n */\nCache::config('_cake_core_', array(\n\t'engine' => $engine,\n\t'prefix' => $prefix . 'cake_core_',\n\t'path' => CACHE . 'persistent' . DS,\n\t'serialize' => ($engine === 'File'),\n\t'duration' => $duration\n));\n\n/**\n * Configure the cache for model and datasource caches.  This cache configuration\n * is used to store schema descriptions, and table listings in connections.\n */\nCache::config('_cake_model_', array(\n\t'engine' => $engine,\n\t'prefix' => $prefix . 'cake_model_',\n\t'path' => CACHE . 'models' . DS,\n\t'serialize' => ($engine === 'File'),\n\t'duration' => $duration\n));\n"]],"start1":0,"start2":0,"length1":0,"length2":9972}]],"length":9972}
{"contributors":[],"silentsave":true,"ts":1352520655384,"patch":[[{"diffs":[[0,"', '"],[-1,"DYhG93b0qyJfIxfs2guVoUubWwvniR2G0FgaC9mi"],[1,"ASDfjo4asdjfop4mlkasf90uio32jr90uoadsjfsjfo34joasfas"],[0,"');\n"]],"start1":6757,"start2":6757,"length1":48,"length2":60}]],"length":9984,"saved":false}
{"ts":1352520662875,"patch":[[{"diffs":[[0,", '7"],[-1,"6859309657453542496749683645"],[1,"3728473959604836385737294858394"],[0,"');\n"]],"start1":6939,"start2":6939,"length1":36,"length2":39}]],"length":9987,"saved":false}
{"contributors":[],"silentsave":false,"ts":1352523004169,"patch":[[{"diffs":[[0,"ts' => '"],[-1,"php"],[1,"cake"],[0,"'\n\t));\n\n"]],"start1":6555,"start2":6555,"length1":19,"length2":20}]],"length":9988,"saved":false}
