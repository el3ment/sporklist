{"ts":1352520382696,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\n/**\n * This file is loaded automatically by the app/webroot/index.php file after core.php\n *\n * This file should load/create any application wide configuration settings, such as \n * Caching, Logging, loading additional configuration files.\n *\n * You should also use this file to include any files that provide global functions/constants\n * that your application uses.\n *\n * PHP 5\n *\n * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)\n * Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)\n *\n * Licensed under The MIT License\n * Redistributions of files must retain the above copyright notice.\n *\n * @copyright     Copyright 2005-2012, Cake Software Foundation, Inc. (http://cakefoundation.org)\n * @link          http://cakephp.org CakePHP(tm) Project\n * @package       app.Config\n * @since         CakePHP(tm) v 0.10.8.2117\n * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)\n */\n\n/**\n * Cache Engine Configuration\n * Default settings provided below\n *\n * File storage engine.\n *\n * \t Cache::config('default', array(\n *\t\t'engine' => 'File', //[required]\n *\t\t'duration'=> 3600, //[optional]\n *\t\t'probability'=> 100, //[optional]\n * \t\t'path' => CACHE, //[optional] use system tmp directory - remember to use absolute path\n * \t\t'prefix' => 'cake_', //[optional]  prefix every cache file with this string\n * \t\t'lock' => false, //[optional]  use file locking\n * \t\t'serialize' => true, // [optional]\n * \t\t'mask' => 0666, // [optional] permission mask to use when creating cache files\n *\t));\n *\n * APC (http://pecl.php.net/package/APC)\n *\n * \t Cache::config('default', array(\n *\t\t'engine' => 'Apc', //[required]\n *\t\t'duration'=> 3600, //[optional]\n *\t\t'probability'=> 100, //[optional]\n * \t\t'prefix' => Inflector::slug(APP_DIR) . '_', //[optional]  prefix every cache file with this string\n *\t));\n *\n * Xcache (http://xcache.lighttpd.net/)\n *\n * \t Cache::config('default', array(\n *\t\t'engine' => 'Xcache', //[required]\n *\t\t'duration'=> 3600, //[optional]\n *\t\t'probability'=> 100, //[optional]\n *\t\t'prefix' => Inflector::slug(APP_DIR) . '_', //[optional] prefix every cache file with this string\n *\t\t'user' => 'user', //user from xcache.admin.user settings\n *\t\t'password' => 'password', //plaintext password (xcache.admin.pass)\n *\t));\n *\n * Memcache (http://memcached.org/)\n *\n * \t Cache::config('default', array(\n *\t\t'engine' => 'Memcache', //[required]\n *\t\t'duration'=> 3600, //[optional]\n *\t\t'probability'=> 100, //[optional]\n * \t\t'prefix' => Inflector::slug(APP_DIR) . '_', //[optional]  prefix every cache file with this string\n * \t\t'servers' => array(\n * \t\t\t'127.0.0.1:11211' // localhost, default port 11211\n * \t\t), //[optional]\n * \t\t'persistent' => true, // [optional] set this to false for non-persistent connections\n * \t\t'compress' => false, // [optional] compress data in Memcache (slower, but uses less memory)\n *\t));\n *\n *  Wincache (http://php.net/wincache)\n *\n * \t Cache::config('default', array(\n *\t\t'engine' => 'Wincache', //[required]\n *\t\t'duration'=> 3600, //[optional]\n *\t\t'probability'=> 100, //[optional]\n *\t\t'prefix' => Inflector::slug(APP_DIR) . '_', //[optional]  prefix every cache file with this string\n *\t));\n *\n * Redis (http://http://redis.io/)\n *\n * \t Cache::config('default', array(\n *\t\t'engine' => 'Redis', //[required]\n *\t\t'duration'=> 3600, //[optional]\n *\t\t'probability'=> 100, //[optional]\n *\t\t'prefix' => Inflector::slug(APP_DIR) . '_', //[optional]  prefix every cache file with this string\n *\t\t'server' => '127.0.0.1' // localhost\n *\t\t'port' => 6379 // default port 6379\n *\t\t'timeout' => 0 // timeout in seconds, 0 = unlimited\n *\t\t'persistent' => true, // [optional] set this to false for non-persistent connections\n *\t));\n */\nCache::config('default', array('engine' => 'File'));\n\n/**\n * The settings below can be used to set additional paths to models, views and controllers.\n *\n * App::build(array(\n *     'Model'                     => array('/path/to/models', '/next/path/to/models'),\n *     'Model/Behavior'            => array('/path/to/behaviors', '/next/path/to/behaviors'),\n *     'Model/Datasource'          => array('/path/to/datasources', '/next/path/to/datasources'),\n *     'Model/Datasource/Database' => array('/path/to/databases', '/next/path/to/database'),\n *     'Model/Datasource/Session'  => array('/path/to/sessions', '/next/path/to/sessions'),\n *     'Controller'                => array('/path/to/controllers', '/next/path/to/controllers'),\n *     'Controller/Component'      => array('/path/to/components', '/next/path/to/components'),\n *     'Controller/Component/Auth' => array('/path/to/auths', '/next/path/to/auths'),\n *     'Controller/Component/Acl'  => array('/path/to/acls', '/next/path/to/acls'),\n *     'View'                      => array('/path/to/views', '/next/path/to/views'),\n *     'View/Helper'               => array('/path/to/helpers', '/next/path/to/helpers'),\n *     'Console'                   => array('/path/to/consoles', '/next/path/to/consoles'),\n *     'Console/Command'           => array('/path/to/commands', '/next/path/to/commands'),\n *     'Console/Command/Task'      => array('/path/to/tasks', '/next/path/to/tasks'),\n *     'Lib'                       => array('/path/to/libs', '/next/path/to/libs'),\n *     'Locale'                    => array('/path/to/locales', '/next/path/to/locales'),\n *     'Vendor'                    => array('/path/to/vendors', '/next/path/to/vendors'),\n *     'Plugin'                    => array('/path/to/plugins', '/next/path/to/plugins'),\n * ));\n *\n */\n\n/**\n * Custom Inflector rules, can be set to correctly pluralize or singularize table, model, controller names or whatever other\n * string is passed to the inflection functions\n *\n * Inflector::rules('singular', array('rules' => array(), 'irregular' => array(), 'uninflected' => array()));\n * Inflector::rules('plural', array('rules' => array(), 'irregular' => array(), 'uninflected' => array()));\n *\n */\n\n/**\n * Plugins need to be loaded manually, you can either load them one by one or all of them in a single call\n * Uncomment one of the lines below, as you need. make sure you read the documentation on CakePlugin to use more\n * advanced ways of loading plugins\n *\n * CakePlugin::loadAll(); // Loads all plugins at once\n * CakePlugin::load('DebugKit'); //Loads a single plugin named DebugKit\n *\n */\n\n\n/**\n * You can attach event listeners to the request lifecyle as Dispatcher Filter . By Default CakePHP bundles two filters:\n *\n * - AssetDispatcher filter will serve your asset files (css, images, js, etc) from your themes and plugins\n * - CacheDispatcher filter will read the Cache.check configure variable and try to serve cached content generated from controllers\n *\n * Feel free to remove or add filters as you see fit for your application. A few examples:\n *\n * Configure::write('Dispatcher.filters', array(\n *\t\t'MyCacheFilter', //  will use MyCacheFilter class from the Routing/Filter package in your app.\n *\t\t'MyPlugin.MyFilter', // will use MyFilter class from the Routing/Filter package in MyPlugin plugin.\n * \t\tarray('callable' => $aFunction, 'on' => 'before', 'priority' => 9), // A valid PHP callback type to be called on beforeDispatch\n *\t\tarray('callable' => $anotherMethod, 'on' => 'after'), // A valid PHP callback type to be called on afterDispatch\n *\n * ));\n */\nConfigure::write('Dispatcher.filters', array(\n\t'AssetDispatcher',\n\t'CacheDispatcher'\n));\n\n/**\n * Configures default file logging options\n */\nApp::uses('CakeLog', 'Log');\nCakeLog::config('debug', array(\n\t'engine' => 'FileLog',\n\t'types' => array('notice', 'info', 'debug'),\n\t'file' => 'debug',\n));\nCakeLog::config('error', array(\n\t'engine' => 'FileLog',\n\t'types' => array('warning', 'error', 'critical', 'alert', 'emergency'),\n\t'file' => 'error',\n));\n"]],"start1":0,"start2":0,"length1":0,"length2":7793}]],"length":7793}
{"contributors":[],"silentsave":true,"ts":1352520398768,"patch":[[{"diffs":[[0,"error',\n));\n"],[1,"\n\ndate_default_timezone_se\n"]],"start1":7781,"start2":7781,"length1":12,"length2":39}]],"length":7820,"saved":false}
{"ts":1352520400931,"patch":[[{"diffs":[[0,"ezone_se"],[1,"t("],[0,"\n"]],"start1":7811,"start2":7811,"length1":9,"length2":11}]],"length":7822,"saved":false}
{"ts":1352520458534,"patch":[[{"diffs":[[0,"one_set("],[1,"'America/Chicago'"],[0,"\n"]],"start1":7813,"start2":7813,"length1":9,"length2":26}]],"length":7839,"saved":false}
{"ts":1352520459031,"patch":[[{"diffs":[[0,"Chicago'"],[1,"_"],[0,"\n"]],"start1":7830,"start2":7830,"length1":9,"length2":10}]],"length":7840,"saved":false}
{"ts":1352520459587,"patch":[[{"diffs":[[0,"Chicago'"],[-1,"_"],[0,"\n"]],"start1":7830,"start2":7830,"length1":10,"length2":9}]],"length":7839,"saved":false}
{"ts":1352520460979,"patch":[[{"diffs":[[0,"Chicago'"],[1,");"],[0,"\n"]],"start1":7830,"start2":7830,"length1":9,"length2":11}]],"length":7841,"saved":false}
{"ts":1352520482302,"patch":[[{"diffs":[[0,";\n\n\n"],[-1,"date_default_timezone_set('America/Chicago');\n"]],"start1":7791,"start2":7791,"length1":50,"length2":4}]],"length":7795,"saved":false}
{"ts":1352520484928,"patch":[[{"diffs":[[0,"r',\n));\n"],[-1,"\n\n"]],"start1":7785,"start2":7785,"length1":10,"length2":8}]],"length":7793,"saved":false}
{"ts":1352520544737,"patch":[[{"diffs":[[0,"error',\n));\n"],[1,"\n\n"]],"start1":7781,"start2":7781,"length1":12,"length2":14}]],"length":7795,"saved":false}
{"ts":1352520548051,"patch":[[{"diffs":[[0,"r',\n));\n"],[-1,"\n\n"]],"start1":7785,"start2":7785,"length1":10,"length2":8}]],"length":7793,"saved":false}
